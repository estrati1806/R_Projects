import yfinance as yf
import statsmodels.api as sm
import getFamaFrenchFactors as ff

# extracting the data

ticker = 'nvda'
start = '2017-12-01'
end = '2022-12-31'

# extract the data from Y!finance and convert it to % returns
stock_data = yf.download(ticker, start, end)["Adj Close"]
stock_returns = stock_data.resample('M').last().pct_change().dropna()
stock_returns.name = "Month_Return"
print(stock_returns)

# extract the Fama-French factor data and rename date column
ff3m = ff.famaFrench3Factor(frequency='m')
ff3m.rename(columns={"date_ff_factors": "Date"}, inplace=True)
print(ff3m)

# merge stock return and fama french factor datasets together
ff_data = ff3m.merge(stock_returns, on='Date')
print(ff_data)

# linear regression
# list of independent variables
X = ff_data[['Mkt-RF', 'SMB', 'HML']]
# dependent variable = excess returns = returns (%) - risk-free rate change
y = ff_data['Month_Return'] - ff_data['RF']
# adding constant to add the intercept to the model
# intercept is not included by default and should be added by the user
X = sm.add_constant(X)
# fitting the model
ff_model = sm.OLS(y, X).fit()
print(ff_model.summary())

# calculating expected returns
# specify the model parameters needed for the formula
intercept, b1, b2, b3 = ff_model.params
# finding the average of the factors, and rf rate
rf = ff_data['RF'].mean()
market_premium = ff3m['Mkt-RF'].mean()
size_premium = ff3m['SMB'].mean()
value_premium = ff3m['HML'].mean()
# monthly expected return
expected_monthly_return = rf + b1 * market_premium + b2 * size_premium + b3 * value_premium
# yearly expected return
expected_yearly_return = expected_monthly_return * 12
print("Expected yearly return for " + ticker.upper() + ": " + str("{:.2%}".format(expected_yearly_return)))
